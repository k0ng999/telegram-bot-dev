from datetime import date, timedelta
import pandas as pd
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from telebot.types import Message
from io import BytesIO
import matplotlib.patches as patches
import colorsys
from sqlalchemy import select, func
from models.service.models import FakeChart, FakeUsersStats
from models.user.models import Seller, SellerStat, SalesReport
from models.user import SessionLocal as UserSessionLocal
from models.service import SessionLocal as ServiceSessionLocal
from datetime import date, timedelta
from sqlalchemy import func

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è/–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
def adjust_color_brightness(color, factor):
    r, g, b = color
    h, l, s = colorsys.rgb_to_hls(r, g, b)
    l = max(0, min(1, l * factor))
    r, g, b = colorsys.hls_to_rgb(h, l, s)
    return (r, g, b)


def register(bot):
    @bot.message_handler(commands=['stats'])
    def stats_handler(message: Message):
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ FakeUsersStats ---
        service_session = ServiceSessionLocal()
        first_user = service_session.execute(
            select(FakeUsersStats).order_by(FakeUsersStats.id)
        ).scalars().first()

        # --- –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id ---
        user_session = UserSessionLocal()
        try:
            seller_user = user_session.execute(
                select(Seller).where(Seller.telegram_id == str(message.from_user.id))
            ).scalars().first()

            if not seller_user:
                bot.send_message(
                    message.chat.id, 
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üìä\n\n"
                    "üë§ –ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
                    "‚úçÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return

            seller_stat = user_session.execute(
                select(SellerStat).where(SellerStat.seller_id == seller_user.id)
            ).scalars().first()

            if not seller_stat:
                bot.send_message(
                    message.chat.id, 
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä\n\n"
                    "üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏–ª–∞—Å—å."
                )
                return
        finally:
            user_session.close()

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–∏–æ–¥ ---
        period_days = 0
        fake_users_count = 0
        if first_user:
            period_days = first_user.period or 0
            fake_users_count = first_user.fake_users or 0

        chart_data = []
        store_names = []
        numbers = []

        if first_user and first_user.fake_active and fake_users_count >= 9:
            # --- –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ FakeChart ---
            try:
                chart_data_all = service_session.execute(
                    select(FakeChart).order_by(FakeChart.total_sold.desc())
                ).scalars().all()
            finally:
                service_session.close()

            chart_data = chart_data_all[:9]
            store_names = [f"{seller_stat.shop_name} (–í—ã)"] + [c.shop_name for c in chart_data]
            numbers = [seller_stat.total_sold] + [c.total_sold for c in chart_data]

        else:
            # --- –î–∞–Ω–Ω—ã–µ —Å–º–µ—à–∞–Ω–Ω—ã–µ: —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ + —Ñ–µ–π–∫–∏ ---
            # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—Ä–∞—Ç—å
            real_users_to_take = max(0, 9 - fake_users_count)

            # –ë–µ—Ä—ë–º —Ç–æ–ø —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ total_sold –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ period_days
            user_session = UserSessionLocal()
            try:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ, –µ—Å–ª–∏ period_days > 0
                if period_days > 0:
                    since_date = date.today() - timedelta(days=period_days)
                    top_seller_ids = (
                        user_session.execute(
                            select(SellerStat.seller_id, func.sum(SalesReport.sold_quantity).label("total"))
                            .join(SalesReport, SellerStat.seller_id == SalesReport.seller_id)
                            .where(SalesReport.report_date >= since_date)
                            .group_by(SellerStat.seller_id)
                            .order_by(func.sum(SalesReport.sold_quantity).desc())
                        ).all()
                    )
                else:
                    # –µ—Å–ª–∏ period_days=0, –±–µ—Ä—ë–º –ø–æ –≤—Å–µ–º—É total_sold
                    top_seller_ids = (
                        user_session.execute(
                            select(SellerStat).order_by(SellerStat.total_sold.desc())
                        ).scalars().all()
                    )
                    top_seller_ids = [(s.seller_id, s.total_sold) for s in top_seller_ids]

                # –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                top_seller_ids = [s for s in top_seller_ids if s[0] != seller_user.id][:real_users_to_take]

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ top_seller_ids
                top_sellers_stats = []
                for s_id, total in top_seller_ids:
                    total_sold_real = total
                    stat = user_session.execute(
                        select(SellerStat).where(SellerStat.seller_id == s_id)
                    ).scalars().first()
                    if stat:
                        top_sellers_stats.append((stat.shop_name, total_sold_real))

            finally:
                user_session.close()

            # –ë–µ—Ä—ë–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–µ–π–∫–æ–≤
            fake_chart_data = []
            if fake_users_count > 0:
                service_session = ServiceSessionLocal()
                try:
                    chart_data_all = service_session.execute(
                        select(FakeChart).order_by(FakeChart.total_sold.desc())
                    ).scalars().all()
                    fake_chart_data = chart_data_all[:fake_users_count]
                finally:
                    service_session.close()

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
            store_names = [f"{seller_stat.shop_name} (–í—ã)"]
            numbers = [seller_stat.total_sold or 0]

            for shop_name, total in top_sellers_stats:
                store_names.append(shop_name)
                numbers.append(total)

            for f in fake_chart_data:
                store_names.append(f.shop_name)
                numbers.append(f.total_sold)

        # --- –°—Ç—Ä–æ–∏–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
        df = pd.DataFrame({
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä": numbers,
            "–ú–∞–≥–∞–∑–∏–Ω": store_names,
            "–ß–∏—Å–ª–æ": numbers
        })
        df["–î–µ–Ω—å"] = range(1, len(df) + 1)

        # –¶–≤–µ—Ç–∞ (tab10)
        colors = plt.cm.tab10.colors
        bar_colors = [colors[i % len(colors)] for i in range(len(df))]

        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
        fig, ax = plt.subplots(figsize=(9, 6))
        dx, dy = 0.2, 0.2

        for day, value, base_color, num in zip(df["–î–µ–Ω—å"], df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä"], bar_colors, df["–ß–∏—Å–ª–æ"]):
            x, y, w, h = day - 0.4, 0, 0.8, value

            # –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä–∞–Ω—å
            main = patches.Polygon(
                [[x, y], [x+w, y], [x+w, y+h], [x, y+h]],
                closed=True, facecolor=base_color, linewidth=0
            )
            ax.add_patch(main)

            # –±–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å (—Ç–µ–º–Ω–µ–µ)
            side_color = adjust_color_brightness(base_color, 0.7)
            side = patches.Polygon(
                [[x+w, y], [x+w+dx, y+dy], [x+w+dx, y+dy+h], [x+w, y+h]],
                closed=True, facecolor=side_color, linewidth=0
            )
            ax.add_patch(side)

            # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å (—Å–≤–µ—Ç–ª–µ–µ)
            top_color = adjust_color_brightness(base_color, 1.3)
            top = patches.Polygon(
                [[x, y+h], [x+w, y+h], [x+w+dx, y+h+dy], [x, y+h+dy]],
                closed=True, facecolor=top_color, linewidth=0
            )
            ax.add_patch(top)

            # –ø–æ–¥–ø–∏—Å—å —á–∏—Å–ª–∞ –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–æ–π
            ax.text(x + w/2, -max(df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä"])*0.05, str(num),
                    ha="center", va="top", fontsize=10)

        # –ü–æ–¥–ø–∏—Å–∏ –∏ —Å–µ—Ç–∫–∞
        ax.set_xlim(0, len(df)+1)
        ax.set_ylim(-max(df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä"])*0.1, max(df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä"])*1.2)
        ax.set_title("–°—Ç–∞—Å—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", fontsize=14, fontweight="bold")
        ax.set_xlabel("–ü—Ä–æ–¥–∞–≤—Ü—ã", fontsize=12)
        ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä", fontsize=12)
        ax.grid(axis="y", linestyle="--", alpha=0.5)

        # –õ–µ–≥–µ–Ω–¥–∞
        legend_elements = [
            plt.Line2D([0], [0], marker='s', color='w', markerfacecolor=bar_colors[i],
                       markersize=10, label=store_names[i])
            for i in range(len(df))
        ]
        ax.legend(handles=legend_elements, loc="center left", bbox_to_anchor=(1.02, 0.5))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buf = BytesIO()
        plt.savefig(buf, format="jpeg", dpi=150, bbox_inches="tight")
        buf.seek(0)
        plt.close()

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ ---
        bot.send_photo(
            message.chat.id, 
            buf, 
            caption=(f"üëü –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä: *{seller_stat.total_sold or 0}*\n\n"
                     "üí° –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É–ª—É—á—à–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!\n"
                     "üì© –ù–µ –∑–∞–±—É–¥—å –≤–æ–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π."),
            parse_mode="Markdown"
        )

from telebot import TeleBot, types
from sqlalchemy import asc
from models.user.models import Seller, TestAttempt
from models.service.models import LearningCard, LearningBlocks
from models.user import SessionLocal as UserSessionLocal
from models.service import SessionLocal as ServiceSessionLocal

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É Maison!\n"
    "–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ —Å—Ç–∏–ª—å, –∫–æ–º—Ñ–æ—Ä—Ç –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.\n\n"
    "–í —ç—Ç–æ–º –æ–±—É—á–∞—é—â–µ–º –±–ª–æ–∫–µ —Ç—ã —É–∑–Ω–∞–µ—à—å –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∏—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞:\n"
    "–æ–± –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ - —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª–µ–≥–∫–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å!\n"
    "–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –æ–±—É–≤—å, –∞ –¥–∞—Ä–∏—Ç—å –æ—â—É—â–µ–Ω–∏–µ –ª—ë–≥–∫–æ—Å—Ç–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∞—Å–æ—Ç—ã –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç Maison!"
)


def show_blocks_menu(bot: TeleBot, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–ª–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_ids = []

    with ServiceSessionLocal() as service_session:
        blocks = service_session.query(LearningBlocks).order_by(asc(LearningBlocks.block_number)).all()

    # –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤
    keyboard_blocks = types.InlineKeyboardMarkup()
    for block in blocks:
        keyboard_blocks.add(types.InlineKeyboardButton(block.block_name, callback_data=f"block_{block.block_number}"))
    msg_blocks = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –æ–±—É—á–µ–Ω–∏—è:", reply_markup=keyboard_blocks)
    message_ids.append(msg_blocks.message_id)

    # –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
    if blocks:
        keyboard_start = types.InlineKeyboardMarkup()
        keyboard_start.add(types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç ‚úÖ", callback_data="start_test"))
        msg_start = bot.send_message(
            chat_id,
            "–ü—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ? –¢–æ–≥–¥–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã!",
            reply_markup=keyboard_start
        )
        message_ids.append(msg_start.message_id)

    return message_ids


def send_card(bot: TeleBot, chat_id, seller_id, block_number, card_number=1, last_message_ids=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞, —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    if last_message_ids:
        for msg_id in last_message_ids:
            try:
                bot.delete_message(chat_id, msg_id)
            except:
                pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—É—á–µ–Ω–∏–µ
    with UserSessionLocal() as user_session:
        finished_attempt = user_session.query(TestAttempt).filter_by(seller_id=seller_id, finished=True).first()
        if finished_attempt:
            keyboard_sales = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            keyboard_sales.add(types.KeyboardButton("/sales_report"))
            bot.send_message(
                chat_id,
                "‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç, –Ω–∞–ø–∏—Å–∞–≤ /sales_report.",
                reply_markup=keyboard_sales
            )
            return None

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª–æ–∫–∞
    with ServiceSessionLocal() as service_session:
        cards = service_session.query(LearningCard).filter_by(block=block_number).order_by(asc(LearningCard.card_number)).all()
        if not cards:
            bot.send_message(chat_id, "–ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚ùå")
            return None

        card_number = max(1, min(card_number, len(cards)))
        card = cards[card_number - 1]

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    is_last_card = card_number == len(cards)
    keyboard = types.InlineKeyboardMarkup()
    if card_number > 1:
        keyboard.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"card_{block_number}_{card_number-1}"))
    if not is_last_card:
        keyboard.add(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"card_{block_number}_{card_number+1}"))
    else:
        keyboard.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫ ‚û°", callback_data="show_congrats"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    if card.image_urls:
        urls = [u.strip() for u in card.image_urls.split(",") if u.strip()]
        msg = bot.send_photo(chat_id, urls[0], caption=f"üìö {card.lesson_text}", reply_markup=keyboard)
        for url in urls[1:]:
            bot.send_photo(chat_id, url)
    else:
        msg = bot.send_message(chat_id, f"üìö {card.lesson_text}", reply_markup=keyboard)

    return msg.message_id


def register(bot: TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""

    @bot.message_handler(commands=['education'])
    def handle_education(message):
        telegram_id = str(message.from_user.id)

        with UserSessionLocal() as user_session:
            seller_id = user_session.query(Seller.id).filter_by(telegram_id=telegram_id).scalar()
            if not seller_id:
                bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            finished_attempt = user_session.query(TestAttempt).filter_by(seller_id=seller_id, finished=True).first()
            if finished_attempt:
                keyboard_sales = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                keyboard_sales.add(types.KeyboardButton("/sales_report"))
                bot.send_message(
                    message.chat.id,
                    "‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –Ω–∞–ø–∏—Å–∞–≤ /sales_report.",
                    reply_markup=keyboard_sales
                )
                return

        bot.send_message(message.chat.id, WELCOME_TEXT)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        bot.user_last_messages = getattr(bot, "user_last_messages", {})
        bot.user_last_messages[telegram_id] = show_blocks_menu(bot, message.chat.id)

    @bot.callback_query_handler(
        func=lambda call: call.data.startswith("block_") or call.data.startswith("card_") or
                          call.data == "show_congrats" or call.data.startswith("start_block_")
    )
    def handle_callback(call):
        telegram_id = str(call.from_user.id)

        with UserSessionLocal() as user_session:
            seller_id = user_session.query(Seller.id).filter_by(telegram_id=telegram_id).scalar()
            if not seller_id:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

        last_message_ids = getattr(bot, "user_last_messages", {}).get(telegram_id, [])

        # –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ¬ª ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –±–ª–æ–∫–∞
        if call.data.startswith("start_block_"):
            block_number = int(call.data.split("_")[2])
            send_card(bot, call.message.chat.id, seller_id, block_number, card_number=1, last_message_ids=last_message_ids)
            bot.answer_callback_query(call.id)
            return

        if call.data.startswith("block_"):
            block_number = int(call.data.split("_")[1])
            send_card(bot, call.message.chat.id, seller_id, block_number, card_number=1, last_message_ids=last_message_ids)
            bot.answer_callback_query(call.id)
            return

        if call.data.startswith("card_"):
            try:
                _, block_number, card_number = call.data.split("_")
                block_number = int(block_number)
                card_number = int(card_number)
            except:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
                return

            send_card(bot, call.message.chat.id, seller_id, block_number, card_number=card_number, last_message_ids=last_message_ids)
            bot.answer_callback_query(call.id)
            return

        if call.data == "show_congrats":
            try:
                for msg_id in last_message_ids:
                    bot.delete_message(call.message.chat.id, msg_id)
            except:
                pass
            bot.send_message(call.message.chat.id, "üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –±–ª–æ–∫ –æ–±—É—á–µ–Ω–∏—è!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –º–µ–Ω—é –±–ª–æ–∫–æ–≤
            bot.user_last_messages[telegram_id] = show_blocks_menu(bot, call.message.chat.id)
            bot.answer_callback_query(call.id)

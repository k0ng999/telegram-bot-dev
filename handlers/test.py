from telebot import TeleBot, types
from sqlalchemy.orm import Session
from models.user.models import Seller, TestAttempt, Logs_test
from models.service.models import Tests
from models.user import SessionLocal as UserSessionLocal
from models.service import SessionLocal as ServiceSessionLocal
import json


def register(bot: TeleBot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Å—Ç–æ–º.
    """

    @bot.callback_query_handler(func=lambda call: call.data in ["start_test", "repeat_wrong"] or call.data.startswith("answer_"))
    def handle_test(call):
        telegram_id = str(call.from_user.id)

        with UserSessionLocal() as user_session:
            seller = user_session.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

        last_message_id = call.message.message_id

        # ---- –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ ----
        if call.data == "start_test":
            try:
                bot.delete_message(call.message.chat.id, last_message_id)
            except:
                pass

            with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
                attempt = user_session.query(TestAttempt).filter_by(seller_id=seller.id).first()
                if attempt:
                    # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    attempt.correct_answers = 0
                    attempt.wrong_answers = "[]"
                    attempt.current_question_index = 0
                    attempt.finished = False
                else:
                    # –ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
                    attempt = TestAttempt(
                        seller_id=seller.id,
                        name=seller.name,
                        shop_name=seller.shop_name,
                        city=seller.city,
                        correct_answers=0,
                        wrong_answers="[]",
                        current_question_index=0,
                        finished=False
                    )
                    user_session.add(attempt)

                user_session.commit()
                user_session.refresh(attempt)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
                questions = service_session.query(Tests).order_by(Tests.test_number.asc()).all()
                if not questions:
                    bot.send_message(call.message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                question = questions[0]
                send_question(bot, call.message.chat.id, question, attempt.id)

            bot.answer_callback_query(call.id)
            return

        # ---- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ----
        if call.data == "repeat_wrong":
            try:
                bot.delete_message(call.message.chat.id, last_message_id)
            except:
                pass

            with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
                attempt = user_session.query(TestAttempt).filter_by(seller_id=seller.id).first()
                if not attempt or not attempt.wrong_answers:
                    bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
                    return

                try:
                    wrong_list = json.loads(attempt.wrong_answers)
                except:
                    wrong_list = []

                wrong_numbers = [wa.get("test_number") for wa in wrong_list if wa.get("test_number")]
                questions = service_session.query(Tests).filter(Tests.test_number.in_(wrong_numbers)).order_by(
                    Tests.test_number.asc()).all()

                if not questions:
                    bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                attempt.finished = False
                user_session.commit()

                # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
                question = questions[0]
                send_question(bot, call.message.chat.id, question, attempt.id, repeat_mode=True, question_index=0)

            bot.answer_callback_query(call.id)
            return

        # ---- –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ----
        if call.data.startswith("answer_"):
            process_answer(bot, call, seller, last_message_id)


def send_question(bot: TeleBot, chat_id: int, question, attempt_id: int, repeat_mode: bool = False, question_index: int = 0):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    keyboard = types.InlineKeyboardMarkup()
    for i in range(4):
        option_text = question.__dict__.get(f"option_{i}")
        if option_text:
            if repeat_mode:
                callback_data = f"answer_repeat_{attempt_id}_{i}_{question_index}"
            else:
                callback_data = f"answer_{attempt_id}_{i}"
            keyboard.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))

    sent = None
    if getattr(question, "image_urls", None):
        urls = [u.strip() for u in str(question.image_urls).split(",") if u.strip()]
        if urls:
            sent = bot.send_photo(chat_id, urls[0], caption=f"üìù {question.question}", reply_markup=keyboard)
            for url in urls[1:]:
                bot.send_photo(chat_id, url)
    if not sent:
        bot.send_message(chat_id, f"üìù {question.question}", reply_markup=keyboard)


def process_answer(bot: TeleBot, call, seller, last_message_id):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—à–∏–±–æ–∫)
    """
    parts = call.data.split("_")
    mode = parts[1]

    if mode == "repeat":
        attempt_id = parts[2]
        selected_option = int(parts[3])
        question_index = int(parts[4])
        repeat_mode = True
    else:
        attempt_id = parts[1]
        selected_option = int(parts[2])
        repeat_mode = False

    with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
        attempt = user_session.query(TestAttempt).filter_by(id=attempt_id).first()
        if not attempt or attempt.finished:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        if repeat_mode:
            try:
                wrong_list = json.loads(attempt.wrong_answers) if attempt.wrong_answers else []
            except:
                wrong_list = []
            wrong_numbers = [wa.get("test_number") for wa in wrong_list if wa.get("test_number")]
            questions = service_session.query(Tests).filter(Tests.test_number.in_(wrong_numbers)).order_by(
                Tests.test_number.asc()).all()
            current_question = questions[question_index]
        else:
            questions = service_session.query(Tests).order_by(Tests.test_number.asc()).all()
            current_question = questions[attempt.current_question_index]

        wrong_answers = []
        try:
            wrong_answers = json.loads(attempt.wrong_answers) if attempt.wrong_answers else []
        except Exception:
            wrong_answers = []

        correct_index = int(current_question.correct_option_index)

        # ---- –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ ----
        if repeat_mode:
            user_answer_text = current_question.__dict__.get(f"option_{selected_option}") or "‚Äî"
            if selected_option == correct_index:
                wrong_answers = [wa for wa in wrong_answers if wa.get("test_number") != current_question.test_number]
            else:
                wrong_answers.append({
                    "test_number": current_question.test_number,
                    "question": current_question.question,
                    "your_answer": user_answer_text
                })
            attempt.wrong_answers = json.dumps(wrong_answers, ensure_ascii=False)
            user_session.commit()
        else:
            if selected_option == correct_index:
                attempt.correct_answers = (attempt.correct_answers or 0) + 1
            else:
                user_answer_text = current_question.__dict__.get(f"option_{selected_option}") or "‚Äî"
                wrong_answers.append({
                    "test_number": current_question.test_number,
                    "question": current_question.question,
                    "your_answer": user_answer_text
                })
            attempt.wrong_answers = json.dumps(wrong_answers, ensure_ascii=False)
            attempt.current_question_index += 1
            user_session.commit()

        try:
            bot.delete_message(call.message.chat.id, last_message_id)
        except:
            pass

        # ---- –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ----
        if repeat_mode:
            next_index = question_index + 1
            if next_index >= len(questions):
                if wrong_answers:
                    bot.send_message(
                        call.message.chat.id,
                        "‚ùå –û—Å—Ç–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏. üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏?",
                        reply_markup=types.InlineKeyboardMarkup().add(
                            types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏", callback_data="repeat_wrong")
                        )
                    )
                else:
                    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
                    with UserSessionLocal() as user_session_finish:
                        attempt_to_finish = user_session_finish.query(TestAttempt).filter_by(
                            seller_id=seller.id,
                        ).first()
                        if attempt_to_finish:
                            attempt_to_finish.finished = True
                            user_session_finish.commit()

                    bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                bot.answer_callback_query(call.id)
                return
            else:
                next_question = questions[next_index]
                send_question(bot, call.message.chat.id, next_question, attempt.id, repeat_mode=True,
                              question_index=next_index)
                bot.answer_callback_query(call.id)
                return

        else:  # –æ–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç
            if attempt.current_question_index >= len(questions):
                attempt.finished = True
                user_session.commit()

                wrong_texts = (
                    "\n".join([f"‚ùå {wa['question']}\n‚û° –í–∞—à –æ—Ç–≤–µ—Ç: {wa['your_answer']}" for wa in wrong_answers])
                    if wrong_answers else "üéâ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã–µ!"
                )
                result_text = (
                    f"‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {attempt.correct_answers} –∏–∑ {len(questions)}\n"
                    f"{wrong_texts}"
                )

                result_keyboard = types.InlineKeyboardMarkup()
                if wrong_answers:
                    result_keyboard.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏", callback_data="repeat_wrong"))

                bot.send_message(call.message.chat.id, result_text, reply_markup=result_keyboard)
                bot.answer_callback_query(call.id)

                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                try:
                    log_entry = Logs_test(
                        seller_id=seller.id,
                        name=seller.name,
                        shop_name=seller.shop_name,
                        city=seller.city,
                        correct_answers=attempt.correct_answers,
                        wrong_answers=json.dumps(wrong_answers, ensure_ascii=False) if wrong_answers else None,
                    )
                    user_session.add(log_entry)
                    user_session.commit()
                except Exception:
                    user_session.rollback()
                return
            else:
                next_question = questions[attempt.current_question_index]
                send_question(bot, call.message.chat.id, next_question, attempt.id)
                bot.answer_callback_query(call.id)
                return

from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from datetime import date
import uuid
from models.user import SessionLocal
from models.user.models import Seller, SellerStat, Payment
from telebot import types

MANAGER_CHAT_ID = -1002882986486
MANAGER_TOPIC_ID = 163

pending_withdrawals = {}  # –ö–ª—é—á: withdraw_id, –∑–Ω–∞—á–µ–Ω–∏–µ: dict —Å –¥–∞–Ω–Ω—ã–º–∏


def register(bot):
    @bot.message_handler(commands=['get_your_bonuses'])
    def get_your_bonuses_handler(message: Message):
        telegram_id = str(message.from_user.id)

        with SessionLocal() as db:
            seller = db.execute(
                select(Seller).where(Seller.telegram_id == telegram_id)
            ).scalar_one_or_none()

            if not seller:
                bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            stat = db.execute(
                select(SellerStat).where(SellerStat.seller_id == seller.id)
            ).scalar_one_or_none()

            if not stat or not stat.unpaid_bonus or stat.unpaid_bonus <= 0:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                return

            withdraw_id = str(uuid.uuid4())
            pending_withdrawals[withdraw_id] = {
                "seller_id": seller.id,
                "step": "waiting_amount",
                "stat": stat,
                "bank_name": seller.bank_name,
                "card_number": seller.card_number,
                "chat_id": message.chat.id,
                "telegram_id": telegram_id,
                "telegram_username": message.from_user.username or "–Ω–µ—Ç",
                "seller_name": seller.name,
                "shop_name": seller.shop_name,
                "city": seller.city,
            }

            bot.send_message(
                message.chat.id,
                f"üéâ –£ –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: {stat.unpaid_bonus} —Ä—É–±–ª–µ–π.\n"
                "–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.",
                reply_markup=cancel_markup(withdraw_id)
            )

    @bot.message_handler(func=lambda m: any(
        str(m.from_user.id) == data.get("telegram_id") and data.get("step") in {
            "waiting_amount", "waiting_bank_name", "waiting_card_number", "confirm_withdraw"
        } for data in pending_withdrawals.values()
    ))
    def handle_withdraw_flow(message: Message):
        for withdraw_id, data in pending_withdrawals.items():
            if str(message.from_user.id) == data.get("telegram_id") and data.get("step") in {
                "waiting_amount", "waiting_bank_name", "waiting_card_number", "confirm_withdraw"
            }:
                process_withdraw_step(bot, message, withdraw_id, data)
                break

    def process_withdraw_step(bot, message, withdraw_id, data):
        step = data.get("step")

        if message.text.strip().lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞"]:
            cancel_request(bot, message.chat.id, withdraw_id)
            return

        if step == "waiting_amount":
            try:
                amount = int(message.text.strip())
            except ValueError:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                                 reply_markup=cancel_markup(withdraw_id))
                return

            if amount <= 0:
                bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                                 reply_markup=cancel_markup(withdraw_id))
                return

            if amount > data["stat"].unpaid_bonus:
                bot.send_message(message.chat.id,
                                 f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å: {data['stat'].unpaid_bonus}.",
                                 reply_markup=cancel_markup(withdraw_id))
                return

            data["amount"] = amount

            if data["bank_name"] and data["card_number"]:
                markup = InlineKeyboardMarkup()
                markup.add(
                    InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É", callback_data=f"use_old_card|{withdraw_id}"))
                markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", callback_data=f"new_card|{withdraw_id}"))
                markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel|{withdraw_id}"))
                bot.send_message(message.chat.id,
                                 f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞: {data['bank_name']} \n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {data['card_number']}\n"
                                 "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é?",
                                 reply_markup=markup)
                data["step"] = "choose_card"
            else:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:", reply_markup=cancel_markup(withdraw_id))
                data["step"] = "waiting_bank_name"

        elif step == "waiting_bank_name":
            data["bank_name"] = message.text.strip()
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (12‚Äì19 —Ü–∏—Ñ—Ä):",
                             reply_markup=cancel_markup(withdraw_id))
            data["step"] = "waiting_card_number"

        elif step == "waiting_card_number":
            card_number = message.text.strip().replace(" ", "")
            if not card_number.isdigit() or not 12 <= len(card_number) <= 19:
                bot.send_message(message.chat.id, "‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 12 –¥–æ 19 —Ü–∏—Ñ—Ä.",
                                 reply_markup=cancel_markup(withdraw_id))
                return

            data["card_number"] = card_number
            masked = f"{card_number}"
            bot.send_message(
                message.chat.id,
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {data['amount']} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É:\n"
                f"{data['bank_name']} - {masked}\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞.",
                reply_markup=confirm_withdraw_markup(withdraw_id)
            )
            data["step"] = "confirm_withdraw"

    @bot.callback_query_handler(func=lambda c: True)
    def callback_withdraw_handler(call: CallbackQuery):
        if "|" not in call.data:
            return

        action, withdraw_id = call.data.split("|", 1)
        data = pending_withdrawals.get(withdraw_id)

        if action == "cancel":
            cancel_request(bot, call.message.chat.id, withdraw_id)
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            return

        if not data:
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
            return

        if action == "use_old_card":
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id)
            masked = data['card_number']
            bot.send_message(data["chat_id"],
                             f"–í—ã–≤–æ–¥ {data['amount']} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É {data['bank_name']} - {masked}.\n"
                             "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                             reply_markup=confirm_withdraw_markup(withdraw_id))
            data["step"] = "confirm_withdraw"

        elif action == "new_card":
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id)
            bot.send_message(data["chat_id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:", reply_markup=cancel_markup(withdraw_id))
            data["step"] = "waiting_bank_name"

        elif action == "confirm":
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id)

            with SessionLocal() as db:
                seller = db.execute(
                    select(Seller).where(Seller.id == data["seller_id"])
                ).scalar_one_or_none()

                if seller is None:
                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω
                    raise ValueError("Seller not found")

                seller.bank_name = data["bank_name"]
                seller.card_number = data["card_number"]

                db.commit()

            admin_text = (
                "üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {data['seller_name']}\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {data['shop_name']}\n"
                f"üìç –ì–æ—Ä–æ–¥: {data['city']}\n"
                f"üí∞ –°—É–º–º–∞: {data['amount']}‚ÇΩ\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {data['bank_name']} {data['card_number']}\n"
                f"üÜî Telegram: {'@' + data['telegram_username'] if data['telegram_username'] != '–Ω–µ—Ç' else '–±–µ–∑ username'}"
            )

            sent_msg = bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text=admin_text,
                reply_markup=admin_confirm_markup(withdraw_id),
                message_thread_id=MANAGER_TOPIC_ID
            )

            data["admin_message_id"] = sent_msg.message_id

            bot.send_message(data["chat_id"],
                             "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã, –æ–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤.")
            data["step"] = "waiting_admin"

        elif action == "reject":
            if call.message.chat.id != MANAGER_CHAT_ID:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                return

            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
            bot.send_message(data["chat_id"], "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_support = types.KeyboardButton('/support')
            keyboard.add(btn_support)

            bot.send_message(
                data["telegram_id"],
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "/support", —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.',
                reply_markup=keyboard
            )

            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            pending_withdrawals.pop(withdraw_id, None)

        elif action == "accept":
            if call.message.chat.id != MANAGER_CHAT_ID:
                bot.answer_callback_query(call.id, "–≠—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                return

            with SessionLocal() as db:
                stat = db.execute(
                    select(SellerStat).where(SellerStat.seller_id == data["seller_id"])
                ).scalar_one()

                stat.unpaid_bonus = max((stat.unpaid_bonus or 0) - data["amount"], 0)

                payment = Payment(
                    seller_id=data["seller_id"],
                    payment_date=date.today(),
                    amount=data["amount"],
                    name = data["seller_name"],
                    shop_name = data["shop_name"],
                    city = data["city"],
                )

                db.add(payment)
                db.commit()

            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
            bot.send_message(data["chat_id"], f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {data['amount']} —Ä—É–±–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            pending_withdrawals.pop(withdraw_id, None)

    def confirm_withdraw_markup(withdraw_id):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm|{withdraw_id}"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{withdraw_id}"),
        )
        return markup

    def admin_confirm_markup(withdraw_id):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"accept|{withdraw_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject|{withdraw_id}"),
        )
        return markup

    def cancel_markup(withdraw_id):
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data=f"cancel|{withdraw_id}"))
        return markup

    def cancel_request(bot, chat_id, withdraw_id):
        pending_withdrawals.pop(withdraw_id, None)
        bot.send_message(chat_id, "üö´ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
from telebot import TeleBot, types
from datetime import date
import json

from models.service.models import LearningCard
from models.service import SessionLocal as ServiceSessionLocal

from models.user.models import Exam, Seller
from models.user import SessionLocal as UserSessionLocal


def register(bot: TeleBot):
    @bot.message_handler(commands=['education'])
    def cmd_education(message: types.Message):
        user_id = message.from_user.id
        telegram_id = str(user_id)

        with UserSessionLocal() as db:
            seller = db.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.send_message(user_id, "üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü.")
                return

            exam = db.query(Exam).filter_by(seller_id=seller.id).first()

            if exam and exam.end_education:

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn_support = types.KeyboardButton('/sales_report')
                keyboard.add(btn_support)

                bot.send_message(
                    user_id,
                    "üéì –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É:\n\n"
                    "`/sales_report`",
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                return


        with ServiceSessionLocal() as db:
            cards = db.query(LearningCard).order_by(LearningCard.card_number).all()
            if not cards:
                bot.send_message(user_id, "–ö–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

        with UserSessionLocal() as db:
            if not exam:
                exam = Exam(
                    seller_id=seller.id,
                    exam_date=date.today(),
                    correct_answers=0,
                    active_question=0,
                    start_education=True,
                    end_education=False,
                    wrong_answers="[]",
                    name=seller.name,
                    shop_name=seller.shop_name,
                    city=seller.city
                )

                db.add(exam)
                db.commit()
                db.refresh(exam)
            else:
                if not exam.start_education:
                    exam.start_education = True
                    exam.end_education = False
                    exam.active_question = 0
                    exam.correct_answers = 0
                    exam.wrong_answers = "[]"
                    db.commit()

            current_index = exam.active_question

        send_learning_card(bot, user_id, cards, current_index)

    def send_learning_card(bot, user_id, cards, index):
        card = cards[index]
        urls = [u.strip() for u in (card.image_urls or "").split(',') if u.strip()]
        if len(urls) > 1:
            media = [types.InputMediaPhoto(url) for url in urls]
            bot.send_media_group(user_id, media)
        elif urls:
            bot.send_photo(user_id, urls[0])

        bot.send_message(user_id, card.lesson_text)

        kb = types.InlineKeyboardMarkup()
        if index > 0:
            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_card"))
        if index + 1 < len(cards):
            kb.add(types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_card"))
            bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ üìö", reply_markup=kb)
        else:
            kb.add(types.InlineKeyboardButton("‚úÖ –í—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –≥–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test"))
            bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! —Ç—ã –ø—Ä–æ—à–µ–ª –æ–±—É—á–µ–Ω–∏–µ! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç, —ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç üïí")
            bot.send_message(user_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç—É üìù", reply_markup=kb)
            bot.send_message(user_id, "‚ö†Ô∏è –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ —Ç–µ—Å—Ç–∞, –∏–Ω–∞—á–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ. ‚ö†Ô∏è")

    @bot.callback_query_handler(func=lambda cq: cq.data == "prev_card")
    def cq_prev_card(cq: types.CallbackQuery):
        user_id = cq.from_user.id
        telegram_id = str(user_id)

        with UserSessionLocal() as db_user, ServiceSessionLocal() as db_service:
            seller = db_user.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(cq.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            cards = db_service.query(LearningCard).order_by(LearningCard.card_number).all()
            exam = db_user.query(Exam).filter_by(seller_id=seller.id).first()

            if not exam or not exam.start_education:
                bot.answer_callback_query(cq.id, "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                return

            if exam.active_question == 0:
                bot.answer_callback_query(cq.id, "–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞, –Ω–∞–∑–∞–¥ –Ω–µ–ª—å–∑—è.")
                return

            exam.active_question -= 1
            exam.active_answer = 0
            db_user.commit()
            current_index = exam.active_question

        bot.answer_callback_query(cq.id)
        send_learning_card(bot, user_id, cards, current_index)

    @bot.callback_query_handler(func=lambda cq: cq.data == "next_card")
    def cq_next_card(cq: types.CallbackQuery):
        user_id = cq.from_user.id
        telegram_id = str(user_id)

        with UserSessionLocal() as db:
            seller = db.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(cq.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

        with ServiceSessionLocal() as db:
            cards = db.query(LearningCard).order_by(LearningCard.card_number).all()

        with UserSessionLocal() as db:
            exam = db.query(Exam).filter_by(seller_id=seller.id).first()
            if not exam:
                bot.answer_callback_query(cq.id, "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                return

            if exam.active_question + 1 >= len(cards):
                bot.answer_callback_query(cq.id, "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞.")
                return

            exam.active_question += 1
            db.commit()
            current_index = exam.active_question

        bot.answer_callback_query(cq.id)
        send_learning_card(bot, user_id, cards, current_index)

    @bot.callback_query_handler(func=lambda cq: cq.data == "start_test")
    def cq_start_test(cq: types.CallbackQuery):
        user_id = cq.from_user.id
        telegram_id = str(user_id)

        with UserSessionLocal() as db:
            seller = db.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(cq.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            exam = db.query(Exam).filter_by(seller_id=seller.id).first()
            if not exam:
                bot.answer_callback_query(cq.id, "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                return

            exam.active_question = 0
            exam.correct_answers = 0
            exam.wrong_answers = "[]"
            db.commit()

        with ServiceSessionLocal() as db:
            cards = db.query(LearningCard).order_by(LearningCard.card_number).all()

        bot.answer_callback_query(cq.id)
        send_test_question(bot, user_id, cards, 0)

    def send_test_question(bot, user_id, cards, index):
        card = cards[index]
        kb = types.InlineKeyboardMarkup(row_width=2)
        options = [card.option_1, card.option_2, card.option_3, card.option_4]
        for idx, opt in enumerate(options):
            kb.add(types.InlineKeyboardButton(opt, callback_data=f"answer|{idx}"))
        bot.send_message(user_id, card.question, reply_markup=kb)

    @bot.callback_query_handler(func=lambda cq: cq.data and cq.data.startswith("answer|"))
    def cq_answer(cq: types.CallbackQuery):
        user_id = cq.from_user.id
        telegram_id = str(user_id)

        with UserSessionLocal() as db_user, ServiceSessionLocal() as db_service:
            seller = db_user.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(cq.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            cards = db_service.query(LearningCard).order_by(LearningCard.card_number).all()
            exam = db_user.query(Exam).filter_by(seller_id=seller.id).first()
            if not exam:
                bot.answer_callback_query(cq.id, "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                return

            _, sidx = cq.data.split('|')
            selected = int(sidx)
            current_index = exam.active_question

            if current_index >= len(cards):
                bot.answer_callback_query(cq.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                return

            card = cards[current_index]
            options = [card.option_1, card.option_2, card.option_3, card.option_4]

            exam.active_answer = selected
            if selected == card.correct_option_index:
                exam.correct_answers += 1
            else:
                wrong = {
                    "question": card.question,
                    "correct": options[card.correct_option_index],
                    "selected": options[selected]
                }
                wrong_answers = json.loads(exam.wrong_answers or "[]")
                wrong_answers.append(wrong)
                exam.wrong_answers = json.dumps(wrong_answers, ensure_ascii=False)

            exam.active_question += 1
            next_index = exam.active_question

            if next_index >= len(cards):
                exam.active_question = 0
                exam.active_answer = 0
                exam.end_education = (exam.correct_answers == len(cards))

            db_user.commit()
            correct = exam.correct_answers
            total = len(cards)
            wrong_answers = json.loads(exam.wrong_answers or "[]")

        bot.answer_callback_query(cq.id)

        if next_index < total:
            send_test_question(bot, user_id, cards, next_index)
        else:
            if correct == total:
                bot.send_message(user_id, "üéâ –ú–æ–ª–æ–¥–µ—Ü! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")
            else:
                kb = types.InlineKeyboardMarkup()
                kb.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_education"))

                message = f"‚ùå –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {correct} –∏–∑ {total} –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:\n\n"
                for i, w in enumerate(wrong_answers, 1):
                    message += (
                        f"{i}. ‚ùì *{w['question']}*\n"
                        f"üü• –í–∞—à –æ—Ç–≤–µ—Ç: {w['selected']}\n\n"
                    )

                bot.send_message(user_id, message, parse_mode="Markdown", reply_markup=kb)

    @bot.callback_query_handler(func=lambda cq: cq.data == "restart_education")
    def cq_restart_education(cq: types.CallbackQuery):
        user_id = cq.from_user.id
        telegram_id = str(user_id)

        with UserSessionLocal() as db:
            seller = db.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(cq.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            exam = db.query(Exam).filter_by(seller_id=seller.id).first()
            if not exam:
                bot.answer_callback_query(cq.id, "–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")
                return

            exam.start_education = True
            exam.end_education = False
            exam.active_question = 0
            exam.correct_answers = 0
            exam.wrong_answers = "[]"
            db.commit()

        with ServiceSessionLocal() as db:
            cards = db.query(LearningCard).order_by(LearningCard.card_number).all()

        bot.answer_callback_query(cq.id)
        send_learning_card(bot, user_id, cards, 0)

from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select
from datetime import date
from models.user import SessionLocal
from models.user.models import Seller, SalesReport, SellerStat, Payment

withdraw_requests = {}  # –ö–ª—é—á: telegram_id, –∑–Ω–∞—á–µ–Ω–∏–µ: dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞


def register(bot):
    @bot.message_handler(commands=['get_your_bonuses'])
    def get_your_bonuses_handler(message: Message):
        telegram_id = str(message.from_user.id)

        with SessionLocal() as db:
            seller = db.execute(
                select(Seller).where(Seller.telegram_id == telegram_id)
            ).scalar_one_or_none()

            if not seller:
                bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

            stat = db.execute(
                select(SellerStat).where(SellerStat.seller_id == seller.id)
            ).scalar_one_or_none()

            if not stat or not stat.unpaid_bonus or stat.unpaid_bonus <= 0:
                bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
                return

            bot.send_message(
                message.chat.id,
                f"üéâ –£ –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞: {stat.unpaid_bonus} —Ä—É–±–ª–µ–π.\n"
                "–°–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏? –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º."
            )

            withdraw_requests[telegram_id] = {
                "seller_id": seller.id,
                "step": "waiting_amount",
                "stat": stat,
                "bank_name": seller.bank_name,
                "card_number": seller.card_number,
                "chat_id": message.chat.id,
                "telegram_username": message.from_user.username or "–Ω–µ—Ç",
                "seller_name": seller.name,
                "shop_name": seller.shop_name,
                "city": seller.city,
            }

    @bot.message_handler(func=lambda m: str(m.from_user.id) in withdraw_requests)
    def handle_withdraw_flow(message: Message):
        telegram_id = str(message.from_user.id)
        data = withdraw_requests.get(telegram_id)

        if not data:
            bot.send_message(message.chat.id,
                             "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /get_your_bonuses")
            return

        step = data.get("step")

        if step == "waiting_amount":
            try:
                amount = int(message.text.strip())
            except ValueError:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                return

            if amount <= 0:
                bot.send_message(message.chat.id, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return

            if amount > data["stat"].unpaid_bonus:
                bot.send_message(message.chat.id,
                                 f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º —É –≤–∞—Å –µ—Å—Ç—å: {data['stat'].unpaid_bonus}.")
                return

            data["amount"] = amount

            if data["bank_name"] and data["card_number"]:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É", callback_data="use_old_card"))
                markup.add(InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", callback_data="new_card"))
                bot.send_message(message.chat.id,
                                 f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:\n{data['bank_name']} - {data['card_number']}\n"
                                 "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é?",
                                 reply_markup=markup)
                data["step"] = "choose_card"
            else:
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
                data["step"] = "waiting_bank_name"

        elif step == "waiting_bank_name":
            data["bank_name"] = message.text.strip()
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:")
            data["step"] = "waiting_card_number"

        elif step == "waiting_card_number":
            card_number = message.text.strip()
            data["card_number"] = card_number

            bot.send_message(
                message.chat.id,
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ {data['amount']} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É:\n"
                f"{data['bank_name']} - {data['card_number']}\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞.",
                reply_markup=confirm_withdraw_markup()
            )
            data["step"] = "confirm_withdraw"

        elif step == "confirm_withdraw":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    @bot.callback_query_handler(
        func=lambda c: c.data in ["use_old_card", "new_card", "confirm_withdraw_yes", "confirm_withdraw_no"])
    def callback_withdraw_handler(call: CallbackQuery):
        telegram_id = str(call.from_user.id)
        data = withdraw_requests.get(telegram_id)
        if not data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return

        if call.data == "use_old_card":
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id, reply_markup=None)
            bot.send_message(data["chat_id"],
                             f"–í—ã–≤–æ–¥ {data['amount']} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É {data['bank_name']} - {data['card_number']}.\n"
                             "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
                             reply_markup=confirm_withdraw_markup())
            data["step"] = "confirm_withdraw"

        elif call.data == "new_card":
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id, reply_markup=None)
            bot.send_message(data["chat_id"], "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
            data["step"] = "waiting_bank_name"

        elif call.data == "confirm_withdraw_yes":
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id, reply_markup=None)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Seller (–µ—Å–ª–∏ –±—ã–ª–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞)
            with SessionLocal() as db:
                seller = db.execute(select(Seller).where(Seller.id == data["seller_id"])).scalar_one()
                seller.bank_name = data["bank_name"]
                seller.card_number = data["card_number"]
                db.commit()

            admin_chat_id = -1002882986486

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            admin_message_text = (
                "üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {data['seller_name']}\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {data['shop_name']}\n"
                f"üìç –ì–æ—Ä–æ–¥: {data['city']}\n"
                f"üí∞ –°—É–º–º–∞: {data['amount']}‚ÇΩ\n"
                f"üí≥ –ö–∞—Ä—Ç–∞: {data['bank_name']} {data['card_number'][:4]}******{data['card_number'][-4:]}\n"
                f"üÜî Telegram: {'@' + data['telegram_username'] if data['telegram_username'] != '–Ω–µ—Ç' else '–±–µ–∑ username'} (ID: {telegram_id})")

            sent_msg = bot.send_message(
                admin_chat_id,
                admin_message_text,
                reply_markup=admin_confirm_markup(telegram_id, data["amount"])
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–æ–º
            data["admin_message_id"] = sent_msg.message_id

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                data["chat_id"],
                "‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã, –æ–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤."
            )

            data["step"] = "waiting_admin"

        elif call.data == "confirm_withdraw_no":
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            bot.edit_message_reply_markup(data["chat_id"], call.message.message_id, reply_markup=None)
            del withdraw_requests[telegram_id]
            bot.send_message(data["chat_id"], "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    def confirm_withdraw_markup():
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_withdraw_yes"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="confirm_withdraw_no")
        )
        return markup

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    def admin_confirm_markup(telegram_id, amount):
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({amount}‚ÇΩ)", callback_data=f"admin_confirm_{telegram_id}_{amount}"),
            InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ({amount}‚ÇΩ)", callback_data=f"admin_reject_{telegram_id}_{amount}"),
        )
        return markup

    @bot.callback_query_handler(
        func=lambda c: c.data and (c.data.startswith("admin_confirm_") or c.data.startswith("admin_reject_")))
    def admin_response_handler(call: CallbackQuery):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
        if call.message.chat.id != -1002882986486:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        data_parts = call.data.split("_")
        action = data_parts[1]  # confirm –∏–ª–∏ reject
        telegram_id = data_parts[2]
        amount = int(data_parts[3])

        if telegram_id not in withdraw_requests:
            bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        req = withdraw_requests[telegram_id]

        with SessionLocal() as db:
            stat = db.execute(
                select(SellerStat).where(SellerStat.seller_id == req["seller_id"])
            ).scalar_one()

            if action == "confirm":
                new_unpaid = (stat.unpaid_bonus or 0) - amount
                if new_unpaid < 0:
                    new_unpaid = 0
                stat.unpaid_bonus = new_unpaid

                payment = Payment(
                    seller_id=req["seller_id"],
                    payment_date=date.today(),
                    amount=amount
                )
                db.add(payment)
                db.commit()

                bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
                bot.send_message(req["chat_id"], f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

            elif action == "reject":
                bot.answer_callback_query(call.id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
                bot.send_message(req["chat_id"], "‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É /support.")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception:
                pass

            # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –ø–∞–º—è—Ç–∏
            del withdraw_requests[telegram_id]

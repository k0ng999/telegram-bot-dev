import pandas as pd
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from telebot.types import Message
from io import BytesIO
import matplotlib.patches as patches
import colorsys
from sqlalchemy import select
from models.service.models import FakeChart, fake_users_stats
from models.service import SessionLocal as ServiceSessionLocal
from models.user.models import Seller, SellerStat
from models.user import SessionLocal as UserSessionLocal

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è/–æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
def adjust_color_brightness(color, factor):
    r, g, b = color
    h, l, s = colorsys.rgb_to_hls(r, g, b)
    l = max(0, min(1, l * factor))
    r, g, b = colorsys.hls_to_rgb(h, l, s)
    return (r, g, b)

def register(bot):
    @bot.message_handler(commands=['stats'])
    def stats_handler(message: Message):
        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ fake_users_stats ---
        service_session = ServiceSessionLocal()
        first_user = service_session.execute(
            select(fake_users_stats).order_by(fake_users_stats.id)
        ).scalars().first()
        if not (first_user and first_user.fake_active):
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üìä")
            service_session.close()
            return

        # --- –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id ---
        user_session = UserSessionLocal()
        try:
            seller_user = user_session.execute(
                select(Seller).where(Seller.telegram_id == str(message.from_user.id))
            ).scalars().first()

            if not seller_user:
                bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üìä")
                return

            seller_stat = user_session.execute(
                select(SellerStat).where(SellerStat.seller_id == seller_user.id)
            ).scalars().first()

            if not seller_stat:
                bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä")
                return
        finally:
            user_session.close()

        # --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ FakeChart ---
        try:
            chart_data_all = service_session.execute(
                select(FakeChart).order_by(FakeChart.total_bonus)
            ).scalars().all()
        finally:
            service_session.close()

        chart_data = chart_data_all[:9]  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ 9

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
        numbers = [seller_stat.total_bonus] + [c.total_bonus for c in chart_data]
        store_names = [f"{seller_stat.shop_name} (–í—ã)"] + [c.name for c in chart_data]


        df = pd.DataFrame({
            "–ü—Ä–æ–¥–∞–∂–∏": numbers,
            "–ú–∞–≥–∞–∑–∏–Ω": store_names,
            "–ß–∏—Å–ª–æ": numbers
        })
        df["–î–µ–Ω—å"] = range(1, len(df) + 1)

        # –¶–≤–µ—Ç–∞ (tab10)
        colors = plt.cm.tab10.colors
        bar_colors = [colors[i % len(colors)] for i in range(len(df))]

        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
        fig, ax = plt.subplots(figsize=(9, 6))
        dx, dy = 0.2, 0.2

        for day, value, base_color, num in zip(df["–î–µ–Ω—å"], df["–ü—Ä–æ–¥–∞–∂–∏"], bar_colors, df["–ß–∏—Å–ª–æ"]):
            x, y, w, h = day - 0.4, 0, 0.8, value

            # –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä–∞–Ω—å
            main = patches.Polygon(
                [[x, y], [x+w, y], [x+w, y+h], [x, y+h]],
                closed=True, facecolor=base_color, linewidth=0
            )
            ax.add_patch(main)

            # –±–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å (—Ç–µ–º–Ω–µ–µ)
            side_color = adjust_color_brightness(base_color, 0.7)
            side = patches.Polygon(
                [[x+w, y], [x+w+dx, y+dy], [x+w+dx, y+dy+h], [x+w, y+h]],
                closed=True, facecolor=side_color, linewidth=0
            )
            ax.add_patch(side)

            # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å (—Å–≤–µ—Ç–ª–µ–µ)
            top_color = adjust_color_brightness(base_color, 1.3)
            top = patches.Polygon(
                [[x, y+h], [x+w, y+h], [x+w+dx, y+h+dy], [x, y+h+dy]],
                closed=True, facecolor=top_color, linewidth=0
            )
            ax.add_patch(top)

            # –ø–æ–¥–ø–∏—Å—å —á–∏—Å–ª–∞ –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–æ–π
            ax.text(x + w/2, -max(df["–ü—Ä–æ–¥–∞–∂–∏"])*0.05, str(num),
                    ha="center", va="top", fontsize=10)

        # –ü–æ–¥–ø–∏—Å–∏ –∏ —Å–µ—Ç–∫–∞
        ax.set_xlim(0, len(df)+1)
        ax.set_ylim(-max(df["–ü—Ä–æ–¥–∞–∂–∏"])*0.1, max(df["–ü—Ä–æ–¥–∞–∂–∏"])*1.2)
        ax.set_title("–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º", fontsize=14, fontweight="bold")
        ax.set_xlabel("–î–Ω–∏", fontsize=12)
        ax.set_ylabel("–ü—Ä–æ–¥–∞–∂–∏", fontsize=12)
        ax.grid(axis="y", linestyle="--", alpha=0.5)

        # –õ–µ–≥–µ–Ω–¥–∞
        legend_elements = [
            plt.Line2D([0], [0], marker='s', color='w', markerfacecolor=bar_colors[i],
                       markersize=10, label=store_names[i])
            for i in range(len(df))
        ]
        ax.legend(handles=legend_elements, loc="center left", bbox_to_anchor=(1.02, 0.5))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buf = BytesIO()
        plt.savefig(buf, format="jpeg", dpi=150, bbox_inches="tight")
        buf.seek(0)
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        bot.send_photo(
            message.chat.id, 
            buf, 
            caption="–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ üìä (—Å –Ω–æ–º–µ—Ä–∞–º–∏ –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–∞–º–∏)\n\nüí° –¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏!"
        )


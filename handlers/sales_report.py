from telebot.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, ReplyKeyboardRemove, InputMediaPhoto
)
from telebot import types
from sqlalchemy import select
from datetime import date
from uuid import uuid4
from models.user import SessionLocal
from models.user.models import Seller , SalesReport, SellerStat, TestAttempt
import requests
import threading

MANAGER_CHAT_ID = -1002882986486
MANAGER_TOPIC_ID = 14

IMGDD_API_KEY = '39883788afeda281f6268eb6f182fa0b'
MAX_PHOTO_SIZE_BYTES = 30 * 1024 * 1024  # 30 –ú–ë

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
sales_report_state = {}    # { telegram_id: { step, photos, photo_msg_ids, quantity } }
pending_reports = {}       # { report_id: {...} }

def get_exit_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞", callback_data="sales_exit")
    )
    return markup

def get_photo_keyboard():
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="sales_confirm_photos"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="sales_cancel")
    )
    return markup

def get_delete_photo_keyboard(photo_index):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"sales_delete_photo|{photo_index}")
    )
    return markup

def register(bot):
    @bot.message_handler(commands=['sales_report'])
    def handle_sales_report(message: Message):
        telegram_id = str(message.from_user.id)
        with SessionLocal() as db:
            seller = db.execute(
                select(Seller).where(Seller.telegram_id == telegram_id)
            ).scalar_one_or_none()
            if not seller:
                bot.send_message(message.chat.id, "‚ùå –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü.")
                bot.send_message(message.chat.id, "/start")
                return

            exam = db.execute(
                select(TestAttempt)
                .where(TestAttempt.seller_id == seller.id)
            ).scalars().first()
            if not exam or not exam.finished:
                bot.send_message(
                    message.chat.id,
                    "üìò –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö."
                )
                bot.send_message(message.chat.id, "/education")
                return

        sales_report_state[telegram_id] = {
            'step': 'await_quantity',
            'photos': [],
            'photo_msg_ids': []
        }
        bot.send_message(
            message.chat.id,
            "üì¶ –°–∫–æ–ª—å–∫–æ –ø–∞—Ä –æ–±—É–≤–∏ —Ç—ã –ø—Ä–æ–¥–∞–ª?",
            reply_markup=ReplyKeyboardRemove()
        )
        bot.send_message(
            message.chat.id,
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç—á—ë—Ç–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_exit_keyboard()
        )

    @bot.message_handler(
        func=lambda msg: sales_report_state.get(str(msg.from_user.id), {}).get('step') == 'await_quantity'
    )
    def handle_quantity(message: Message):
        telegram_id = str(message.from_user.id)
        try:
            qty = int(message.text.strip())
            if qty <= 0:
                raise ValueError()
        except ValueError:
            bot.send_message(
                message.chat.id,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=get_exit_keyboard()
            )
            return

        sales_report_state[telegram_id]['quantity'] = qty
        sales_report_state[telegram_id]['step'] = 'await_photos'
        bot.send_message(
            message.chat.id,
            "üì∏ –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤.\n"
            "–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤—Å–µ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_photo_keyboard()
        )

    @bot.message_handler(
        func=lambda msg: sales_report_state.get(str(msg.from_user.id), {}).get('step') == 'await_photos',
        content_types=['photo']
    )
    def handle_photos(message: Message):
        telegram_id = str(message.from_user.id)
        state = sales_report_state.get(telegram_id)
        if not state:
            return

        file_info = bot.get_file(message.photo[-1].file_id)
        if file_info.file_size > MAX_PHOTO_SIZE_BYTES:
            bot.send_message(
                message.chat.id,
                "‚ùå –≠—Ç–æ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>30 –ú–ë)."
            )
            return

        state['photos'].append(message.photo[-1].file_id)
        idx = len(state['photos']) - 1

        sent = bot.send_message(
            message.chat.id,
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.\n"
            "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ¬ª –≤—ã—à–µ.",
            reply_markup=get_delete_photo_keyboard(idx)
        )
        state['photo_msg_ids'].append(sent.message_id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith('sales_delete_photo|'))
    def delete_photo_handler(call: CallbackQuery):
        telegram_id = str(call.from_user.id)
        state = sales_report_state.get(telegram_id)
        if not state or state.get('step') != 'await_photos':
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞.")
            return

        _, idx_str = call.data.split('|', 1)
        try:
            idx = int(idx_str)
        except ValueError:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        if 0 <= idx < len(state['photos']):
            state['photos'].pop(idx)
            try:
                msg_id = state['photo_msg_ids'].pop(idx)
                bot.delete_message(call.message.chat.id, msg_id)
            except:
                pass
            bot.answer_callback_query(call.id, "üóëÔ∏è –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ.")
            bot.send_message(
                call.message.chat.id,
                "üì® –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ¬ª."
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @bot.message_handler(
        func=lambda msg: sales_report_state.get(str(msg.from_user.id), {}).get('step') == 'await_photos',
        content_types=['text', 'video', 'document', 'audio', 'voice', 'sticker', 'location', 'contact']
    )
    def handle_invalid_content(message: Message):
        bot.send_message(message.chat.id, '‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤.\n –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ —Å —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"!')

    def retry_upload(bot, call, state, seller, telegram_id, attempt=1):
        MAX_ATTEMPTS = 5
        try:
            image_urls = []
            for file_id in state['photos']:
                fi = bot.get_file(file_id)
                data = bot.download_file(fi.file_path)
                resp = requests.post(
                    'https://api.imgbb.com/1/upload',
                    params={'key': IMGDD_API_KEY},
                    files={'image': data}
                )
                if resp.status_code == 200:
                    image_urls.append(resp.json()['data']['url'])
            if not image_urls:
                raise RuntimeError("No images uploaded")

            qty = state['quantity']
            bonus = qty * 200
            url_str = ",".join(image_urls)

            stub = bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text="üìé –ß–µ–∫–∏ –ø–æ –æ—Ç—á—ë—Ç—É:",
                message_thread_id=MANAGER_TOPIC_ID
            )

            report_id = str(uuid4())[:8]
            pending_reports[report_id] = {
                'telegram_id': telegram_id,
                'quantity': qty,
                'photo_url_str': url_str,
                'manager_chat_id': None,
                'manager_message_id': None,
                'manager_photo_message_ids': [],
                'stub_id': stub.message_id
            }

            media = [InputMediaPhoto(media=u) for u in image_urls[:10]]
            sent_photos = bot.send_media_group(
                chat_id=MANAGER_CHAT_ID,
                media=media,
                reply_to_message_id=stub.message_id
            )
            photo_ids = [m.message_id for m in sent_photos]

            markup = InlineKeyboardMarkup()
            markup.add(
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"sales_accept|{report_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"sales_reject|{report_id}")
            )
            sent = bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text=(
                    f"üßæ –û—Ç—á—ë—Ç –æ—Ç @{call.from_user.username or 'no_username'} "
                    f"({call.from_user.id})\n"
                    f"–ü—Ä–æ–¥–∞–Ω–æ: {qty} –ø–∞—Ä, –±–æ–Ω—É—Å {bonus}‚ÇΩ"
                ),
                reply_markup=markup,
                message_thread_id=MANAGER_TOPIC_ID
            )

            pending_reports[report_id].update({
                'manager_chat_id': sent.chat.id,
                'manager_message_id': sent.message_id,
                'manager_photo_message_ids': photo_ids
            })

            for mid in state.get('photo_msg_ids', []):
                try:
                    bot.delete_message(call.message.chat.id, mid)
                except:
                    pass

            bot.send_message(
                call.message.chat.id,
                f"‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ –æ–¥–æ–±—Ä—è—Ç ‚Äî –ø–æ–ª—É—á–∏—Ç–µ {bonus} –±–æ–Ω—É—Å–æ–≤."
            )
            sales_report_state.pop(telegram_id, None)

        except Exception as e:
            if attempt < MAX_ATTEMPTS:
                bot.send_message(
                    call.message.chat.id,
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–±—É—é –µ—â—ë ({attempt+1}/{MAX_ATTEMPTS})..."
                )
                threading.Timer(
                    2, retry_upload,
                    args=(bot, call, state, seller, telegram_id, attempt+1)
                ).start()
            else:
                bot.send_message(
                    call.message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."
                )

    @bot.callback_query_handler(func=lambda c: c.data == 'sales_confirm_photos')
    def confirm_photos_handler(call: CallbackQuery):
        telegram_id = str(call.from_user.id)
        state = sales_report_state.get(telegram_id)
        if not state or not state.get('photos'):
            bot.answer_callback_query(call.id, "‚ùå –§–æ—Ç–æ –µ—â—ë –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.")
            return

        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é...")
        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
        except:
            pass

        with SessionLocal() as db:
            seller = db.execute(
                select(Seller).where(Seller.telegram_id == telegram_id)
            ).scalar_one()

        threading.Timer(
            0, retry_upload,
            args=(bot, call, state, seller, telegram_id)
        ).start()

    @bot.callback_query_handler(func=lambda c: c.data == 'sales_cancel')
    def cancel_report(call: CallbackQuery):
        telegram_id = str(call.from_user.id)
        sales_report_state.pop(telegram_id, None)
        bot.send_message(
            call.message.chat.id,
            "‚ùå –û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.",
            reply_markup=ReplyKeyboardRemove()
        )
        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
        except:
            pass
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data == 'sales_exit')
    def exit_sales_report(call: CallbackQuery):
        telegram_id = str(call.from_user.id)

        if telegram_id in sales_report_state:
            sales_report_state.pop(telegram_id)

        bot.send_message(
            call.message.chat.id,
            "‚ÑπÔ∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç—á—ë—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.",
            reply_markup=ReplyKeyboardRemove()
        )
        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
        except:
            pass
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith('sales_accept|'))
    def handle_accept(call: CallbackQuery):
        _, report_id = call.data.split('|', 1)
        data = pending_reports.get(report_id)
        if not data:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        with SessionLocal() as db:
            seller = db.execute(
                select(Seller).where(Seller.telegram_id == data['telegram_id'])
            ).scalar_one()

            new_r = SalesReport(
                seller_id=seller.id,
                name=seller.name,
                shop_name=seller.shop_name,
                city=seller.city,
                report_date=date.today(),
                sold_quantity=data['quantity'],
                receipt_photo_url=data['photo_url_str'],
                moderation_passed=True
            )
            db.add(new_r)

            bonus = data['quantity'] * 200
            st = db.execute(
                select(SellerStat).where(SellerStat.seller_id == seller.id)
            ).scalar_one_or_none()
            if st:

                st.total_sold += data['quantity']
                st.total_bonus += bonus
                st.unpaid_bonus += bonus

            else:
                db.add(SellerStat(
                    seller_id=seller.id,
                    name=seller.name,
                    shop_name=seller.shop_name,
                    city=seller.city,
                    total_sold=data['quantity'],
                    total_bonus=bonus,
                    unpaid_bonus=bonus

                ))
            db.commit()
        bot.send_message(
            int(data['telegram_id']),
            f"üéâ"
        )
        bot.send_message(
            int(data['telegram_id']),
            f"–í–∞—à –æ—Ç—á—ë—Ç –æ–¥–æ–±—Ä–µ–Ω! –ë–æ–Ω—É—Å: {bonus}‚ÇΩ."
        )
        try:
            for pid in data['manager_photo_message_ids']:
                bot.delete_message(data['manager_chat_id'], pid)
            bot.delete_message(data['manager_chat_id'], data['manager_message_id'])
            bot.delete_message(data['manager_chat_id'], data['stub_id'])
        except:
            pass

        pending_reports.pop(report_id, None)
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ.")

    @bot.callback_query_handler(func=lambda c: c.data.startswith('sales_reject|'))
    def handle_reject(call: CallbackQuery):
        _, report_id = call.data.split('|', 1)
        data = pending_reports.get(report_id)
        if not data:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        with SessionLocal() as db:
            seller = db.execute(
                select(Seller).where(Seller.telegram_id == data['telegram_id'])
            ).scalar_one()

            # –ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            new_r = SalesReport(
                seller_id=seller.id,
                name=seller.name,
                shop_name=seller.shop_name,
                city=seller.city,
                report_date=date.today(),
                sold_quantity=data['quantity'],
                receipt_photo_url=data['photo_url_str'],
                moderation_passed=False
            )
            db.add(new_r)
            db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(
            int(data['telegram_id']),
            '‚ùå –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_support = types.KeyboardButton('/support')
        keyboard.add(btn_support)

        bot.send_message(
            data["telegram_id"],
            '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "/support", —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.',
            reply_markup=keyboard
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        try:
            for pid in data['manager_photo_message_ids']:
                bot.delete_message(data['manager_chat_id'], pid)
            bot.delete_message(data['manager_chat_id'], data['manager_message_id'])
            bot.delete_message(data['manager_chat_id'], data['stub_id'])
        except:
            pass

        pending_reports.pop(report_id, None)
        bot.answer_callback_query(call.id, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")


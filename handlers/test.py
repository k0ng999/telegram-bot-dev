from telebot import TeleBot, types
from sqlalchemy.orm import Session
from models.user.models import Seller, TestAttempt, Logs_test
from models.service.models import Tests
from models.user import SessionLocal as UserSessionLocal
from models.service import SessionLocal as ServiceSessionLocal
import json

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≥—Ä—É–ø–ø–æ–π —Ñ–æ—Ç–æ
photo_group_messages = {}  # –∫–ª—é—á: attempt_id, –∑–Ω–∞—á–µ–Ω–∏–µ: —Å–ø–∏—Å–æ–∫ message_id


def _dedup_keep_last(items):
    """
    –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ test_number (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞),
    –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç.
    """
    seen = {}
    for wa in items:
        key = str(wa.get("test_number") if wa.get("test_number") is not None else wa.get("question"))
        if key:
            seen[key] = {
                "test_number": wa.get("test_number"),
                "question": wa.get("question"),
                "your_answer": wa.get("your_answer"),
            }
    return list(seen.values())


def register(bot: TeleBot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Å—Ç–æ–º.
    """

    @bot.callback_query_handler(
        func=lambda call: call.data in ["start_test", "repeat_wrong"] or call.data.startswith("answer_")
    )
    def handle_test(call):
        telegram_id = str(call.from_user.id)

        with UserSessionLocal() as user_session:
            seller = user_session.query(Seller).filter_by(telegram_id=telegram_id).first()
            if not seller:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                return

        last_message_id = call.message.message_id

        # ---- –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ ----
        if call.data == "start_test":
            try:
                bot.delete_message(call.message.chat.id, last_message_id)
            except:
                pass

            with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
                attempt = user_session.query(TestAttempt).filter_by(seller_id=seller.id).first()
                if attempt:
                    attempt.correct_answers = 0
                    attempt.wrong_answers = "[]"
                    attempt.current_question_index = 0
                    attempt.finished = False
                else:
                    attempt = TestAttempt(
                        seller_id=seller.id,
                        name=seller.name,
                        shop_name=seller.shop_name,
                        city=seller.city,
                        correct_answers=0,
                        wrong_answers="[]",
                        current_question_index=0,
                        finished=False,
                    )
                    user_session.add(attempt)

                user_session.commit()
                user_session.refresh(attempt)

                questions = service_session.query(Tests).order_by(Tests.test_number.asc()).all()
                if not questions:
                    bot.send_message(call.message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                question = questions[0]
                send_question(bot, call.message.chat.id, question, attempt.id)

            bot.answer_callback_query(call.id)
            return

        # ---- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ----
        if call.data == "repeat_wrong":
            try:
                bot.delete_message(call.message.chat.id, last_message_id)
            except:
                pass

            with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
                attempt = user_session.query(TestAttempt).filter_by(seller_id=seller.id).first()
                if not attempt or not attempt.wrong_answers:
                    bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
                    return

                try:
                    wrong_list = json.loads(attempt.wrong_answers)
                except:
                    wrong_list = []

                wrong_list = _dedup_keep_last(wrong_list)
                wrong_numbers = [wa.get("test_number") for wa in wrong_list if wa.get("test_number")]

                questions = (
                    service_session.query(Tests)
                    .filter(Tests.test_number.in_(wrong_numbers))
                    .order_by(Tests.test_number.asc())
                    .all()
                )

                if not questions:
                    bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return

                attempt.finished = False
                user_session.commit()

                question = questions[0]
                send_question(bot, call.message.chat.id, question, attempt.id, repeat_mode=True)

            bot.answer_callback_query(call.id)
            return

        # ---- –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ----
        if call.data.startswith("answer_"):
            process_answer(bot, call, seller, last_message_id)



def send_question(bot: TeleBot, chat_id: int, question, attempt_id: int, repeat_mode: bool = False):
    from models.user import SessionLocal as UserSessionLocal
    from models.service import SessionLocal as ServiceSessionLocal
    import json

    with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
        if repeat_mode and question is None:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º attempt –∏ wrong_answers
            attempt = user_session.query(TestAttempt).filter_by(id=attempt_id).first()
            if not attempt:
                bot.send_message(chat_id, "‚ùå –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            try:
                wrong_answers = json.loads(attempt.wrong_answers) if attempt.wrong_answers else []
            except:
                wrong_answers = []
            wrong_answers = _dedup_keep_last(wrong_answers)
            if not wrong_answers:
                bot.send_message(chat_id, "‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                attempt.finished = True
                user_session.commit()
                return

            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è wrong_answers
            questions = service_session.query(Tests).order_by(Tests.test_number.asc()).all()
            question = None
            for wa in wrong_answers:
                tn = wa.get("test_number")
                question = next((q for q in questions if q.test_number == tn), None)
                if question:
                    break
            if not question:
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        for i in range(4):
            option_text = question.__dict__.get(f"option_{i}")
            if option_text:
                callback_data = f"answer_repeat_{attempt_id}_{i}" if repeat_mode else f"answer_{attempt_id}_{i}"
                keyboard.add(types.InlineKeyboardButton(option_text, callback_data=callback_data))

        urls = []
        if getattr(question, "image_urls", None):
            urls = [u.strip() for u in str(question.image_urls).split(",") if u.strip()]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ
        old_ids = photo_group_messages.get(attempt_id, [])
        for msg_id in old_ids:
            try:
                bot.delete_message(chat_id, msg_id)
            except:
                continue
        photo_group_messages[attempt_id] = []

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è / —Ñ–æ—Ç–æ
        media_group_ids = []
        if urls:
            if len(urls) == 1:
                msg = bot.send_photo(chat_id, urls[0], caption=f"üìù {question.question}", reply_markup=keyboard)
                media_group_ids.append(msg.message_id)
            else:
                media = [types.InputMediaPhoto(media=urls[0], caption=f"üìù {question.question}")]
                for url in urls[1:]:
                    media.append(types.InputMediaPhoto(media=url))
                try:
                    messages = bot.send_media_group(chat_id, media)
                    media_group_ids.extend([m.message_id for m in messages])
                    bot.edit_message_caption(
                        chat_id=chat_id,
                        message_id=messages[0].message_id,
                        caption=f"üìù {question.question}",
                        reply_markup=keyboard,
                    )
                except Exception:
                    msg = bot.send_message(chat_id, f"üìù {question.question}", reply_markup=keyboard)
                    media_group_ids.append(msg.message_id)
        else:
            msg = bot.send_message(chat_id, f"üìù {question.question}", reply_markup=keyboard)
            media_group_ids.append(msg.message_id)

        photo_group_messages[attempt_id] = media_group_ids



def process_answer(bot: TeleBot, call, seller, last_message_id):
    parts = call.data.split("_")
    mode = parts[1]

    if mode == "repeat":
        attempt_id = parts[2]
        selected_option = int(parts[3])
        repeat_mode = True
    else:
        attempt_id = parts[1]
        selected_option = int(parts[2])
        repeat_mode = False

    with UserSessionLocal() as user_session, ServiceSessionLocal() as service_session:
        attempt = user_session.query(TestAttempt).filter_by(id=attempt_id).first()
        if not attempt or attempt.finished:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        questions = service_session.query(Tests).order_by(Tests.test_number.asc()).all()

        try:
            wrong_answers = json.loads(attempt.wrong_answers) if attempt.wrong_answers else []
        except:
            wrong_answers = []

        wrong_answers = _dedup_keep_last(wrong_answers)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        if repeat_mode:
            if not wrong_answers:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç.")
                return

            current_question = None
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ remaining wrong_answers
            for wa in wrong_answers:
                tn = wa.get("test_number")
                current_question = next((q for q in questions if q.test_number == tn), None)
                if current_question:
                    break
            if not current_question:
                bot.answer_callback_query(call.id, "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
        else:
            if attempt.current_question_index >= len(questions):
                bot.answer_callback_query(call.id, "‚ùå –í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
                return
            current_question = questions[attempt.current_question_index]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        correct_indexes = [int(x.strip()) for x in str(current_question.correct_option_index).split(",") if x.strip().isdigit()]
        tn = getattr(current_question, "test_number", None)
        key = str(tn if tn is not None else current_question.question)
        user_answer_text = current_question.__dict__.get(f"option_{selected_option}") or "‚Äî"
        answered_correctly = selected_option in correct_indexes

        # –û–±–Ω–æ–≤–ª—è–µ–º wrong_answers
        wrong_answers = [wa for wa in wrong_answers if str(wa.get("test_number") or wa.get("question")) != key]
        if not answered_correctly and not repeat_mode:
            wrong_answers.append({"test_number": tn, "question": current_question.question, "your_answer": user_answer_text})

        attempt.wrong_answers = json.dumps(_dedup_keep_last(wrong_answers), ensure_ascii=False)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        if not repeat_mode and answered_correctly:
            attempt.correct_answers = (attempt.correct_answers or 0) + 1
        if not repeat_mode:
            attempt.current_question_index += 1

        user_session.commit()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            bot.delete_message(call.message.chat.id, last_message_id)
        except:
            pass
        for msg_id in photo_group_messages.get(attempt_id, []):
            try:
                bot.delete_message(call.message.chat.id, msg_id)
            except:
                continue
        photo_group_messages[attempt_id] = []

        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        if repeat_mode:
            key = str(tn if tn is not None else current_question.question)
            
            if answered_correctly:
                # –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ wrong_answers
                wrong_answers = [wa for wa in wrong_answers if str(wa.get("test_number") or wa.get("question")) != key]
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º wrong_answers
                updated = False
                for wa in wrong_answers:
                    if str(wa.get("test_number") or wa.get("question")) == key:
                        wa["your_answer"] = user_answer_text
                        updated = True
                        break
                if not updated:
                    wrong_answers.append({"test_number": tn, "question": current_question.question, "your_answer": user_answer_text})
            
            attempt.wrong_answers = json.dumps(_dedup_keep_last(wrong_answers), ensure_ascii=False)
            user_session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            if not wrong_answers:
                attempt.finished = True
                user_session.commit()
                bot.send_message(call.message.chat.id, "‚úÖ –í—Å–µ –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                bot.answer_callback_query(call.id)
                return
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–∞–∑–∞
                questions_to_repeat = []
                questions_all = service_session.query(Tests).order_by(Tests.test_number.asc()).all()
                for wa in wrong_answers:
                    tn_wa = wa.get("test_number")
                    q = next((q for q in questions_all if q.test_number == tn_wa), None)
                    if q:
                        questions_to_repeat.append(q)
        
                if questions_to_repeat:
                    # –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    send_question(bot, call.message.chat.id, None, attempt.id, repeat_mode=True)
                else:
                    # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞–∑–∞–Ω—ã, –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
                    wrong_texts = "\n".join([f"‚ùå {wa['question']}\n‚û° –í–∞—à –æ—Ç–≤–µ—Ç: {wa['your_answer']}" for wa in wrong_answers])
                    result_text = f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n{wrong_texts}"
                    result_keyboard = types.InlineKeyboardMarkup()
                    result_keyboard.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data="repeat_wrong"))
                    bot.send_message(call.message.chat.id, result_text, reply_markup=result_keyboard)
                bot.answer_callback_query(call.id)
                return

        else:
            # –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if attempt.current_question_index >= len(questions):
                attempt.finished = True
                user_session.commit()
                wrong_answers = _dedup_keep_last(wrong_answers)
                wrong_texts = "\n".join([f"‚ùå {wa['question']}\n‚û° –í–∞—à –æ—Ç–≤–µ—Ç: {wa['your_answer']}" for wa in wrong_answers]) if wrong_answers else "üéâ –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã–µ!"
                result_text = f"‚úÖ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ {attempt.correct_answers} –∏–∑ {len(questions)}\n{wrong_texts}"
                result_keyboard = types.InlineKeyboardMarkup()
                if wrong_answers:
                    result_keyboard.add(types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç", callback_data="repeat_wrong"))
                bot.send_message(call.message.chat.id, result_text, reply_markup=result_keyboard)
                bot.answer_callback_query(call.id)
                try:
                    log_entry = Logs_test(
                        seller_id=seller.id,
                        name=seller.name,
                        shop_name=seller.shop_name,
                        city=seller.city,
                        correct_answers=attempt.correct_answers,
                        wrong_answers=json.dumps(wrong_answers, ensure_ascii=False) if wrong_answers else None,
                    )
                    user_session.add(log_entry)
                    user_session.commit()
                except Exception:
                    user_session.rollback()
                return
            else:
                next_question = questions[attempt.current_question_index]
                send_question(bot, call.message.chat.id, next_question, attempt.id)
                bot.answer_callback_query(call.id)
                return
        